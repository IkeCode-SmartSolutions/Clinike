<div id="peopleRowActions" style="display: none">
    <a class="personEdit" href="javascript:void(0)" title="Editação Compacta">
        <i class="fa fa-pencil"></i>
    </a>
    <a class="personDelete" href="javascript:void(0)" title="Apagar">
        <i class="fa fa-trash-o"></i>
    </a>
</div>
<div id="peopleToolbar">
    <button class="btn btn-success" type="button" name="newPerson" title="Novo">
        <i class="fa fa-plus"></i>
        Novo
    </button>
    <button class="btn btn-primary" disabled="disabled" name="fullEditPerson" title="Editar">
        <i class="fa fa-pencil"></i>
        Edição completa
    </button>
</div>
<table id="dtPeople" cellpadding="0" cellspacing="0" border="0" class="table table-striped table-bordered"></table>

<div class="modal fade" id="divPersonEditForm" tabindex="-1" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Fechar"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title">Editando Pessoa (modo: compacto)</h4>
            </div>
            <div class="modal-body">
                <div class="row" data-bind="with: $root.person">
                    @Html.Partial("_Detail")
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Fechar</button>
                <button type="button" data-bind="click: $root.save" class="btn btn-primary">Salvar</button>
            </div>
        </div>
    </div>
</div>

@section scripts{

    <script type="text/javascript">
        function PeopleViewModel() {
            var self = this;
            self.tableSelector = '#dtPeople';

            self.vmBinded = false;
            self.person = ko.observable();
            self.saved = false;
            self.vmContainer = '#divPersonEditForm';

            self.getDetailPageUrl = function (id) {
                return (window.location.toString() + "/detalhe/{0}").format(id);
            }

            self.save = function () {
                $utils.log.verbose('Person Edit :: save button fired');
                self.saved = true;
                var personJs = ko.toJS(self.person());
                var type = 'POST';
                var url = $utils.baseApiUrls.person;

                if (personJs.Id > 0) {
                    type = 'PUT';
                    url += '/' + personJs.Id;
                }

                $.ajax({
                    url: url,
                    contentType: "application/json",
                    async: true,
                    dataType: "json",
                    type: type,
                    data: JSON.stringify(personJs),
                    success: function (data) {
                        swal({
                            title: "Sucesso!"
                            , text: "Alterações realizadas com sucesso!"
                            , type: "success"
                            , showCancelButton: true
                            , cancelButtonColor: "#4cb64c"
                            , cancelButtonText: "Ir para a edição completa"
                        }, function (isConfirm) {
                            if (!isConfirm) {
                                window.open(self.getDetailPageUrl(personJs.Id), '_blank');
                            }

                            var index = $(self.tableSelector + ' tr.selected').data('index');
                            if (index !== undefined) {
                                $(self.tableSelector).bootstrapTable('updateRow', { index: index, row: personJs });
                                $(self.vmContainer).modal('hide');
                            } else {
                                $(self.tableSelector).bootstrapTable('append', personJs);
                            }
                        });
                    },
                    error: function (data) {
                        $utils.log.error('Person :: save error', data);
                    }
                });
            }

            self.bindViewModel = function (data, isNew) {
                var emptyPerson = { Id: 0, Name: '', Email: '', DateIns: '', LastUpdate: '' };
                if (isNew != null && isNew !== undefined && isNew) {
                    data = emptyPerson;
                }

                if (data != null && data !== undefined && $.isPlainObject(data) && !$.isEmptyObject(data)) {
                    var mergedData = $.extend({}, emptyPerson, data);
                    var mappedData = ko.mapping.fromJS(mergedData);
                    self.person(mappedData);
                    self.saved = false;
                }

                if (self.vmBinded) {
                    $utils.log.verbose('Ko :: Binding already applied to {0}'.format(self.vmContainer));
                } else {
                    $utils.log.verbose('Ko :: Applying Binding [target: {0}] | data > '.format(self.vmContainer), data);

                    ko.applyBindings(self, $(self.vmContainer)[0]);
                    self.vmBinded = true;
                }
            };

            self.actionsEvents = {
                'click .personEdit': function (e, value, row, index) {
                    //alert('You click like action, row: ' + JSON.stringify(row));

                    $(self.vmContainer)
                        .modal()
                        .on('shown.bs.modal', function (hideE) {
                            if (self.vmBinded) {
                                $utils.log.verbose('Ko :: Binding already applied to {0}'.format(self.vmContainer));
                            } else {
                                $utils.log.verbose('Ko :: Applying Binding to {0}'.format(self.vmContainer));
                                ko.applyBindings(self, $(self.vmContainer)[0]);
                                self.vmBinded = true;
                            }
                        })
                        .on('hide.bs.modal', function (hideE) {
                            if (!self.saved) {
                                swal({
                                    title: "Você tem certeza?"
                                    , text: "Se mudanças tiverem sido feitas você perderá, deseja mesmo continuar?"
                                    , type: "warning"
                                    , allowEscapeKey: false
                                    , showCancelButton: true
                                    , cancelButtonColor: "#DD6B55"
                                    , cancelButtonText: "Descartar!"
                                    , confirmButtonText: "Voltar ao fomulário"
                                    , closeOnConfirm: true
                                    , closeOnCancel: true
                                    , showLoaderOnConfirm: true
                                }, function (isConfirm) {
                                    if (isConfirm) {
                                        $(hideE.target).modal('show');
                                    } else {
                                        setTimeout(function () {
                                            swal("Alterações descartadas.", "Tudo como estava antes! =)", "info");
                                        }, 150);
                                    }
                                });
                            }
                        });
                },
                'click .personDelete': function (e, value, row, index) {
                    //$utils.log.verbose('PeopleViewModel personDelete e', e);
                    //$utils.log.verbose('PeopleViewModel personDelete row', row);
                    //$utils.log.verbose('PeopleViewModel personDelete index', index);

                    swal({
                        title: "Você tem certeza?"
                        , text: "Tem certeza que deseja excluir esse registro?"
                        , type: "warning"
                        , showCancelButton: true
                        , confirmButtonColor: "#DD6B55"
                        , confirmButtonText: "Sim"
                        , cancelButtonText: "Não"
                        , closeOnConfirm: false
                        , showLoaderOnConfirm: true
                    }, function (isConfirm) {
                        if (isConfirm) {
                            $.ajax({
                                url: $utils.baseApiUrls.person + '/' + ko.toJS(self.person()).Id,
                                contentType: "application/json",
                                async: true,
                                dataType: "json",
                                type: 'DELETE',
                                success: function (data) {
                                    console.log('delete data', data);
                                    if (data.Status == 'Success') {
                                        $(self.tableSelector).bootstrapTable('remove', {
                                            field: 'Id',
                                            values: [row.Id]
                                        });

                                        if (data.Content > 0) {
                                            swal({
                                                title: "Excluido!"
                                                , text: "Registro excluido com sucesso!"
                                                , type: "success"
                                            });
                                        } else {
                                            swal({
                                                title: "Ooops..."
                                                , text: "Esse registro parece já ter sido excluido, mas tudo bem, atualizamos seu grid."
                                                , type: "info"
                                            });
                                        }
                                    } else {
                                        swal({
                                            title: "Ooops..."
                                            , text: "Ocorreu um problema nem sua requisição, tente novamente!"
                                            , type: "error"
                                        });
                                    }
                                },
                                error: function (data) {
                                    swal({
                                        title: "Ooops..."
                                        , text: "Ocorreu um erro em sua requisição! (código: {0})".format(data.Statu)
                                        , type: "error"
                                    });
                                }
                            });
                        } else {
                            setTimeout(function () {
                                swal("Cancelado", "Tudo como estava! =)", "info");
                            }, 150);
                        }
                    });
                }
            };

            self.actionsFormatter = function (value, row, index) {
                return $('#peopleRowActions').html();
            };

            self.init = function () {
                $(document).ready(function () {
                    $('#peopleToolbar button[name="newPerson"]').on('click', function (e) {
                        self.bindViewModel(null, true);
                        $(self.vmContainer).modal('show');
                    });

                    $('#peopleToolbar button[name="fullEditPerson"]').on('click', function (e) {
                        window.open(self.getDetailPageUrl(self.person().Id()), '_blank');
                    });

                    var table = new $utils.bootstrapTable.load({
                        selector: self.tableSelector
                        , defaultParser: true
                        , selectCallback: function (data, e) {
                            $utils.log.verbose('Setting ko person object');
                            self.bindViewModel(data, false);
                            $('#peopleToolbar button[name="fullEditPerson"]').removeAttr('disabled');
                        }
                        , toolbar: '#peopleToolbar'
                        , columns: [
                            {
                                field: 'Id',
                                title: 'ID'
                            }, {
                                field: 'DateIns',
                                title: 'Data de Criação'
                            }, {
                                field: 'Name',
                                title: 'Nome'
                            }
                            , {
                                field: 'Email',
                                title: 'Email'
                            }, {
                                field: 'operate',
                                title: 'Ações',
                                align: 'center',
                                events: self.actionsEvents,
                                formatter: self.actionsFormatter,
                                width: '100px'
                            }]
                        , url: $utils.baseApiUrls.person
                    });
                });
            };
        }

        var peopleViewModel = new PeopleViewModel();
        peopleViewModel.init();
    </script>

}

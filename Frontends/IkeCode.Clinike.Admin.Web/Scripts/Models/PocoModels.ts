///<reference path="../typings/knockout/knockout.d.ts" />
///<reference path="../typings/knockout.mapping/knockout.mapping.d.ts" />
///<reference path="../typings/knockout.validation/knockout.validation.d.ts" />

/* 
* Created by IkeCode { SmartSolutions }
* Generated by PocoModels.tt
* Auto-generated file, all modifications will be lost on every build
*/

// Interfaces
interface IAddress {
    Id: number;
    DateIns: Date;
    LastUpdate: Date;
    Street: string;
    Number: string;
    Complement: string;
    Neighborhood: string;
    ZipCode: string;
    City: string;
    State: string;
    AddressType: any;
    AddressTypeId: number;
    PersonId: number;
    Person: Object;
}

interface IDoctor {
    Id: number;
    DateIns: Date;
    LastUpdate: Date;
    AdmissionDate: Date;
    Person: Object;
}

interface IDocument {
    Id: number;
    DateIns: Date;
    LastUpdate: Date;
    Value: string;
    DocumentTypeId: number;
    PersonId: number;
    DocumentType: Object;
    Person: Object;
}

interface ILegalPerson {
    Id: number;
    DateIns: Date;
    LastUpdate: Date;
    SocialName: string;
    CompanyName: string;
    Person: Object;
}

interface INaturalPerson {
    Id: number;
    DateIns: Date;
    LastUpdate: Date;
    Gender: any;
    Birthdate: Date;
    Person: Object;
}

interface IPerson {
    Id: number;
    DateIns: Date;
    LastUpdate: Date;
    Name: string;
    Email: string;
    ProfileImageUrl: string;
    Doctor: Object;
    LegalPerson: Object;
    NaturalPerson: Object;
    Addresses: Array<AddressPoco>;
    Documents: Array<DocumentPoco>;
    Phones: Array<PhonePoco>;
}

interface IPhone {
    Id: number;
    DateIns: Date;
    LastUpdate: Date;
    Number: string;
    PhoneType: any;
    PhoneTypeId: number;
    PersonId: number;
    Person: Object;
}

interface ISchedule {
    Id: number;
    DateIns: Date;
    LastUpdate: Date;
    StartDate: Date;
    EndDate: Date;
    AllDay: boolean;
    ScheduleType: any;
    ScheduleTypeId: number;
    PatientId: number;
    DoctorId: number;
    Patient: Object;
    Doctor: Object;
}

// Classes
class AddressPoco implements IAddress {
    Id: any;
    DateIns: any;
    LastUpdate: any;
    Street: any;
    Number: any;
    Complement: any;
    Neighborhood: any;
    ZipCode: any;
    City: any;
    State: any;
    AddressType: any;
    AddressTypeId: any;
    PersonId: any;
    Person: any;
}

class KoAddress {
    Id = ko.observable();
    DateIns = ko.observable();
    LastUpdate = ko.observable();
    Street = ko.observable().extend({ maxLength: { params: 250, message: 'O campo Endereço deve ter no máximo 250 caracteres' } }).extend({ required: { params: true, message: 'Campo Endereço é obrigatório' } });
    Number = ko.observable().extend({ maxLength: { params: 10, message: 'O campo Number deve ter no máximo 10 caracteres' } }).extend({ required: { params: true, message: 'O campo Number é obrigatório' } });
    Complement = ko.observable().extend({ maxLength: { params: 50, message: 'O campo Complement deve ter no máximo 50 caracteres' } });
    Neighborhood = ko.observable().extend({ maxLength: { params: 100, message: 'O campo Neighborhood deve ter no máximo 100 caracteres' } }).extend({ required: { params: true, message: 'O campo Neighborhood é obrigatório' } });
    ZipCode = ko.observable().extend({ maxLength: { params: 20, message: 'O campo ZipCode deve ter no máximo 20 caracteres' } }).extend({ required: { params: true, message: 'O campo ZipCode é obrigatório' } });
    City = ko.observable().extend({ required: { params: true, message: 'O campo City é obrigatório' } }).extend({ maxLength: { params: 150, message: 'O campo City deve ter no máximo 150 caracteres' } });
    State = ko.observable().extend({ maxLength: { params: 2, message: 'O campo State deve ter no máximo 2 caracteres' } }).extend({ required: { params: true, message: 'O campo State é obrigatório' } });
    AddressType = ko.observable();
    AddressTypeId = ko.observable();
    PersonId = ko.observable();
    Person = ko.observable();
    public Update(data?: IAddress) {
	   if(data) {
			this.Id(data.Id);
			this.DateIns(data.DateIns);
			this.LastUpdate(data.LastUpdate);
			this.Street(data.Street);
			this.Number(data.Number);
			this.Complement(data.Complement);
			this.Neighborhood(data.Neighborhood);
			this.ZipCode(data.ZipCode);
			this.City(data.City);
			this.State(data.State);
			this.AddressType(data.AddressType);
			this.AddressTypeId(data.AddressTypeId);
			this.PersonId(data.PersonId);
			this.Person(data.Person);
	   }
	}
    public toJS() {
		var result = new AddressPoco();
	   if(this !== undefined) {
			result.Id = this.Id();
			result.DateIns = this.DateIns();
			result.LastUpdate = this.LastUpdate();
			result.Street = this.Street();
			result.Number = this.Number();
			result.Complement = this.Complement();
			result.Neighborhood = this.Neighborhood();
			result.ZipCode = this.ZipCode();
			result.City = this.City();
			result.State = this.State();
			result.AddressType = this.AddressType();
			result.AddressTypeId = this.AddressTypeId();
			result.PersonId = this.PersonId();
			result.Person = this.Person();
		return result;
	   }
	}
}

class DoctorPoco implements IDoctor {
    Id: any;
    DateIns: any;
    LastUpdate: any;
    AdmissionDate: any;
    Person: any;
}

class KoDoctor {
    Id = ko.observable();
    DateIns = ko.observable();
    LastUpdate = ko.observable();
    AdmissionDate = ko.observable();
    Person = ko.observable();
    public Update(data?: IDoctor) {
	   if(data) {
			this.Id(data.Id);
			this.DateIns(data.DateIns);
			this.LastUpdate(data.LastUpdate);
			this.AdmissionDate(data.AdmissionDate);
			this.Person(data.Person);
	   }
	}
    public toJS() {
		var result = new DoctorPoco();
	   if(this !== undefined) {
			result.Id = this.Id();
			result.DateIns = this.DateIns();
			result.LastUpdate = this.LastUpdate();
			result.AdmissionDate = this.AdmissionDate();
			result.Person = this.Person();
		return result;
	   }
	}
}

class DocumentPoco implements IDocument {
    Id: any;
    DateIns: any;
    LastUpdate: any;
    Value: any;
    DocumentTypeId: any;
    PersonId: any;
    DocumentType: any;
    Person: any;
}

class KoDocument {
    Id = ko.observable();
    DateIns = ko.observable();
    LastUpdate = ko.observable();
    Value = ko.observable().extend({ maxLength: { params: 30, message: 'O campo Value deve ter no máximo 30 caracteres' } }).extend({ required: { params: true, message: 'O campo Value é obrigatório' } });
    DocumentTypeId = ko.observable();
    PersonId = ko.observable();
    DocumentType = ko.observable();
    Person = ko.observable();
    public Update(data?: IDocument) {
	   if(data) {
			this.Id(data.Id);
			this.DateIns(data.DateIns);
			this.LastUpdate(data.LastUpdate);
			this.Value(data.Value);
			this.DocumentTypeId(data.DocumentTypeId);
			this.PersonId(data.PersonId);
			this.DocumentType(data.DocumentType);
			this.Person(data.Person);
	   }
	}
    public toJS() {
		var result = new DocumentPoco();
	   if(this !== undefined) {
			result.Id = this.Id();
			result.DateIns = this.DateIns();
			result.LastUpdate = this.LastUpdate();
			result.Value = this.Value();
			result.DocumentTypeId = this.DocumentTypeId();
			result.PersonId = this.PersonId();
			result.DocumentType = this.DocumentType();
			result.Person = this.Person();
		return result;
	   }
	}
}

class LegalPersonPoco implements ILegalPerson {
    Id: any;
    DateIns: any;
    LastUpdate: any;
    SocialName: any;
    CompanyName: any;
    Person: any;
}

class KoLegalPerson {
    Id = ko.observable();
    DateIns = ko.observable();
    LastUpdate = ko.observable();
    SocialName = ko.observable().extend({ maxLength: { params: 250, message: 'O campo Nome Fantasia deve ter no máximo 250 caracteres' } }).extend({ required: { params: true, message: 'O campo Nome Fantasia é obrigatório' } });
    CompanyName = ko.observable().extend({ required: { params: true, message: 'O campo Razão Social é obrigatório' } }).extend({ maxLength: { params: 250, message: 'O campo Razão Social deve ter no máximo 250 caracteres' } });
    Person = ko.observable();
    public Update(data?: ILegalPerson) {
	   if(data) {
			this.Id(data.Id);
			this.DateIns(data.DateIns);
			this.LastUpdate(data.LastUpdate);
			this.SocialName(data.SocialName);
			this.CompanyName(data.CompanyName);
			this.Person(data.Person);
	   }
	}
    public toJS() {
		var result = new LegalPersonPoco();
	   if(this !== undefined) {
			result.Id = this.Id();
			result.DateIns = this.DateIns();
			result.LastUpdate = this.LastUpdate();
			result.SocialName = this.SocialName();
			result.CompanyName = this.CompanyName();
			result.Person = this.Person();
		return result;
	   }
	}
}

class NaturalPersonPoco implements INaturalPerson {
    Id: any;
    DateIns: any;
    LastUpdate: any;
    Gender: any;
    Birthdate: any;
    Person: any;
}

class KoNaturalPerson {
    Id = ko.observable();
    DateIns = ko.observable();
    LastUpdate = ko.observable();
    Gender = ko.observable();
    Birthdate = ko.observable();
    Person = ko.observable();
    public Update(data?: INaturalPerson) {
	   if(data) {
			this.Id(data.Id);
			this.DateIns(data.DateIns);
			this.LastUpdate(data.LastUpdate);
			this.Gender(data.Gender);
			this.Birthdate(data.Birthdate);
			this.Person(data.Person);
	   }
	}
    public toJS() {
		var result = new NaturalPersonPoco();
	   if(this !== undefined) {
			result.Id = this.Id();
			result.DateIns = this.DateIns();
			result.LastUpdate = this.LastUpdate();
			result.Gender = this.Gender();
			result.Birthdate = this.Birthdate();
			result.Person = this.Person();
		return result;
	   }
	}
}

class PersonPoco implements IPerson {
    Id: any;
    DateIns: any;
    LastUpdate: any;
    Name: any;
    Email: any;
    ProfileImageUrl: any;
    Doctor: any;
    LegalPerson: any;
    NaturalPerson: any;
    Addresses: any;
    Documents: any;
    Phones: any;
}

class KoPerson {
    Id = ko.observable();
    DateIns = ko.observable();
    LastUpdate = ko.observable();
    Name = ko.observable().extend({ required: { params: true, message: 'O campo Nome é obrigatório' } }).extend({ maxLength: { params: 250, message: 'O campo Nome deve ter no máximo 250 caracteres' } });
    Email = ko.observable().extend({ maxLength: { params: 250, message: 'O campo Email deve ter no máximo 250 caracteres' } }).extend({ required: { params: true, message: 'O campo Email é obrigatório' } });
    ProfileImageUrl = ko.observable();
    Doctor = ko.observable();
    LegalPerson = ko.observable();
    NaturalPerson = ko.observable();
    Addresses = ko.observableArray();
    Documents = ko.observableArray();
    Phones = ko.observableArray();
    public Update(data?: IPerson) {
	   if(data) {
			this.Id(data.Id);
			this.DateIns(data.DateIns);
			this.LastUpdate(data.LastUpdate);
			this.Name(data.Name);
			this.Email(data.Email);
			this.ProfileImageUrl(data.ProfileImageUrl);
			this.Doctor(data.Doctor);
			this.LegalPerson(data.LegalPerson);
			this.NaturalPerson(data.NaturalPerson);
			this.Addresses(data.Addresses);
			this.Documents(data.Documents);
			this.Phones(data.Phones);
	   }
	}
    public toJS() {
		var result = new PersonPoco();
	   if(this !== undefined) {
			result.Id = this.Id();
			result.DateIns = this.DateIns();
			result.LastUpdate = this.LastUpdate();
			result.Name = this.Name();
			result.Email = this.Email();
			result.ProfileImageUrl = this.ProfileImageUrl();
			result.Doctor = this.Doctor();
			result.LegalPerson = this.LegalPerson();
			result.NaturalPerson = this.NaturalPerson();
			result.Addresses = this.Addresses();
			result.Documents = this.Documents();
			result.Phones = this.Phones();
		return result;
	   }
	}
}

class PhonePoco implements IPhone {
    Id: any;
    DateIns: any;
    LastUpdate: any;
    Number: any;
    PhoneType: any;
    PhoneTypeId: any;
    PersonId: any;
    Person: any;
}

class KoPhone {
    Id = ko.observable();
    DateIns = ko.observable();
    LastUpdate = ko.observable();
    Number = ko.observable().extend({ maxLength: { params: 30, message: 'O campo Number deve ter no máximo 30 caracteres' } }).extend({ required: { params: true, message: 'O campo Number é obrigatório' } });
    PhoneType = ko.observable();
    PhoneTypeId = ko.observable();
    PersonId = ko.observable();
    Person = ko.observable();
    public Update(data?: IPhone) {
	   if(data) {
			this.Id(data.Id);
			this.DateIns(data.DateIns);
			this.LastUpdate(data.LastUpdate);
			this.Number(data.Number);
			this.PhoneType(data.PhoneType);
			this.PhoneTypeId(data.PhoneTypeId);
			this.PersonId(data.PersonId);
			this.Person(data.Person);
	   }
	}
    public toJS() {
		var result = new PhonePoco();
	   if(this !== undefined) {
			result.Id = this.Id();
			result.DateIns = this.DateIns();
			result.LastUpdate = this.LastUpdate();
			result.Number = this.Number();
			result.PhoneType = this.PhoneType();
			result.PhoneTypeId = this.PhoneTypeId();
			result.PersonId = this.PersonId();
			result.Person = this.Person();
		return result;
	   }
	}
}

class SchedulePoco implements ISchedule {
    Id: any;
    DateIns: any;
    LastUpdate: any;
    StartDate: any;
    EndDate: any;
    AllDay: any;
    ScheduleType: any;
    ScheduleTypeId: any;
    PatientId: any;
    DoctorId: any;
    Patient: any;
    Doctor: any;
}

class KoSchedule {
    Id = ko.observable();
    DateIns = ko.observable();
    LastUpdate = ko.observable();
    StartDate = ko.observable().extend({ required: { params: true, message: 'O campo StartDate é obrigatório' } });
    EndDate = ko.observable().extend({ required: { params: true, message: 'O campo EndDate é obrigatório' } });
    AllDay = ko.observable();
    ScheduleType = ko.observable().extend({ required: { params: true, message: 'O campo ScheduleType é obrigatório' } });
    ScheduleTypeId = ko.observable();
    PatientId = ko.observable().extend({ required: { params: true, message: 'O campo PatientId é obrigatório' } });
    DoctorId = ko.observable().extend({ required: { params: true, message: 'O campo DoctorId é obrigatório' } });
    Patient = ko.observable();
    Doctor = ko.observable();
    public Update(data?: ISchedule) {
	   if(data) {
			this.Id(data.Id);
			this.DateIns(data.DateIns);
			this.LastUpdate(data.LastUpdate);
			this.StartDate(data.StartDate);
			this.EndDate(data.EndDate);
			this.AllDay(data.AllDay);
			this.ScheduleType(data.ScheduleType);
			this.ScheduleTypeId(data.ScheduleTypeId);
			this.PatientId(data.PatientId);
			this.DoctorId(data.DoctorId);
			this.Patient(data.Patient);
			this.Doctor(data.Doctor);
	   }
	}
    public toJS() {
		var result = new SchedulePoco();
	   if(this !== undefined) {
			result.Id = this.Id();
			result.DateIns = this.DateIns();
			result.LastUpdate = this.LastUpdate();
			result.StartDate = this.StartDate();
			result.EndDate = this.EndDate();
			result.AllDay = this.AllDay();
			result.ScheduleType = this.ScheduleType();
			result.ScheduleTypeId = this.ScheduleTypeId();
			result.PatientId = this.PatientId();
			result.DoctorId = this.DoctorId();
			result.Patient = this.Patient();
			result.Doctor = this.Doctor();
		return result;
	   }
	}
}

